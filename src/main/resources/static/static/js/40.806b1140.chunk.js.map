{"version":3,"file":"static/js/40.806b1140.chunk.js","mappings":"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","sources":["components/ResponsiveAuthImage.js","hooks/useCountdown.js","components/ApiStatusBlock.js","components/PasswordPromptModal.js","components/ApiStatusPanel.js","pages/DashboardPage.js"],"sourcesContent":["import React from 'react';\r\nimport { LazyLoadImage } from 'react-lazy-load-image-component';\r\nimport 'react-lazy-load-image-component/src/effects/blur.css';\r\nimport { API_URL } from '../apiConfig';\r\n\r\nconst ResponsiveAuthImage = ({ baseName, alt, className, sizes, onLoad }) => {\r\n    // Render a simple placeholder if baseName is invalid.\r\n    if (!baseName || typeof baseName !== 'string') {\r\n        return <div className={`bg-gray-200 ${className}`} />;\r\n    }\r\n\r\n    const uuidRegex = /([a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12})/;\r\n    const match = baseName.match(uuidRegex);\r\n\r\n    if (!match) {\r\n        console.warn(`ResponsiveAuthImage: Could not extract a valid image ID from baseName: \"${baseName}\"`);\r\n        return <div className={`bg-gray-200 ${className}`} />;\r\n    }\r\n\r\n    const cleanedBaseName = match[0];\r\n\r\n    // Construct image URLs\r\n    const src = `${API_URL}/api/uploads/${cleanedBaseName}-small.webp`;\r\n    const placeholderSrc = `${API_URL}/api/uploads/${cleanedBaseName}-tiny.webp`; // New tiny version for the blur effect\r\n    const srcSet = [\r\n        `${API_URL}/api/uploads/${cleanedBaseName}-small.webp 300w`,\r\n        `${API_URL}/api/uploads/${cleanedBaseName}-medium.webp 600w`,\r\n        `${API_URL}/api/uploads/${cleanedBaseName}.webp 1200w`\r\n    ].join(', ');\r\n\r\n    return (\r\n        <LazyLoadImage\r\n            alt={alt}\r\n            src={src}\r\n            srcSet={srcSet}\r\n            sizes={sizes}\r\n            placeholderSrc={placeholderSrc}\r\n            effect=\"blur\"\r\n            className={className}\r\n            afterLoad={onLoad} // Use afterLoad for the library's load event\r\n        />\r\n    );\r\n};\r\n\r\nexport default ResponsiveAuthImage;","import { useState, useEffect, useMemo } from 'react';\r\n\r\nconst useCountdown = (targetTime) => {\r\n    const countDownDate = useMemo(() => new Date(targetTime).getTime(), [targetTime]);\r\n\r\n    const [countDown, setCountDown] = useState(\r\n        countDownDate - new Date().getTime()\r\n    );\r\n\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            setCountDown(countDownDate - new Date().getTime());\r\n        }, 1000);\r\n\r\n        return () => clearInterval(interval);\r\n    }, [countDownDate]);\r\n\r\n    return getReturnValues(countDown);\r\n};\r\n\r\nconst getReturnValues = (countDown) => {\r\n    if (countDown < 0) {\r\n        return { hours: 0, minutes: 0, seconds: 0, isFinished: true };\r\n    }\r\n    const hours = Math.floor((countDown % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\r\n    const minutes = Math.floor((countDown % (1000 * 60 * 60)) / (1000 * 60));\r\n    const seconds = Math.floor((countDown % (1000 * 60)) / 1000);\r\n\r\n    return { hours, minutes, seconds, isFinished: false };\r\n};\r\n\r\nexport { useCountdown };\r\n","import React, { useState } from 'react';\r\nimport { FaSync, FaTrash, FaCheckCircle, FaExclamationCircle, FaChevronDown, FaChevronUp } from 'react-icons/fa';\r\nimport { useCountdown } from '../hooks/useCountdown';\r\n\r\nconst ApiStatusBlock = ({ title, logs, onRefresh, onFlush, nextRefreshTime }) => {\r\n    const [isRefreshing, setIsRefreshing] = useState(false);\r\n    const [isFlushing, setIsFlushing] = useState(false);\r\n    const [showAllLogs, setShowAllLogs] = useState(false);\r\n    const { hours, minutes, seconds, isFinished } = useCountdown(nextRefreshTime);\r\n\r\n    const handleRefresh = async () => {\r\n        setIsRefreshing(true);\r\n        await onRefresh();\r\n        setIsRefreshing(false);\r\n    };\r\n\r\n    const handleFlush = async (password, flushFn) => {\r\n        setIsFlushing(true);\r\n        try {\r\n            await flushFn(password);\r\n        } catch (error) {\r\n            console.error(\"Flush failed:\", error);\r\n            // Optionally, show an error toast to the user\r\n        }\r\n        setIsFlushing(false);\r\n    };\r\n\r\n    const formatTime = (t) => t.toString().padStart(2, '0');\r\n\r\n    const countdownText = isFinished\r\n        ? \"Refresh due\"\r\n        : `${formatTime(hours)}h ${formatTime(minutes)}m ${formatTime(seconds)}s`;\r\n\r\n    const logsToShow = showAllLogs ? logs : logs.slice(0, 3);\r\n\r\n    return (\r\n        <div className=\"bg-white p-6 rounded-xl shadow-md border border-gray-200\">\r\n            <div className=\"flex justify-between items-center mb-4\">\r\n                <h3 className=\"text-lg font-bold text-gray-800\">{title}</h3>\r\n                <div className=\"flex items-center space-x-2\">\r\n                    <button\r\n                        onClick={handleRefresh}\r\n                        disabled={isRefreshing}\r\n                        className=\"p-2 text-sm text-sky-600 bg-sky-100 hover:bg-sky-200 rounded-full transition disabled:opacity-50 disabled:cursor-wait\"\r\n                        title=\"Refresh Data Now\"\r\n                    >\r\n                        <FaSync className={isRefreshing ? 'animate-spin' : ''} />\r\n                    </button>\r\n                    <button\r\n                        onClick={() => onFlush(handleFlush)}\r\n                        disabled={isFlushing}\r\n                        className=\"p-2 text-sm text-red-600 bg-red-100 hover:bg-red-200 rounded-full transition disabled:opacity-50\"\r\n                        title=\"Flush Cached Data\"\r\n                    >\r\n                        <FaTrash />\r\n                    </button>\r\n                </div>\r\n            </div>\r\n\r\n            {nextRefreshTime && (\r\n                 <p className=\"text-xs text-gray-500 mb-4\">\r\n                    Auto-refresh in: <span className=\"font-semibold text-gray-600\">{countdownText}</span>\r\n                </p>\r\n            )}\r\n\r\n            <div className=\"space-y-3\">\r\n                {logsToShow.length > 0 ? logsToShow.map(log => (\r\n                    <LogItem key={log.id} log={log} />\r\n                )) : (\r\n                    <p className=\"text-sm text-gray-500 text-center py-4\">No logs available.</p>\r\n                )}\r\n            </div>\r\n\r\n            {logs.length > 3 && (\r\n                <button \r\n                    onClick={() => setShowAllLogs(!showAllLogs)}\r\n                    className=\"text-sm text-sky-600 font-semibold mt-4 flex items-center\"\r\n                >\r\n                    {showAllLogs ? 'Show Recent Logs' : 'Show All Logs'}\r\n                    {showAllLogs ? <FaChevronUp className=\"ml-2\" /> : <FaChevronDown className=\"ml-2\" />}\r\n                </button>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst LogItem = ({ log }) => {\r\n    const isSuccess = log.status === 'SUCCESS';\r\n    const formatDate = (dateString) => new Date(dateString).toLocaleString();\r\n\r\n    return (\r\n        <div className=\"text-xs border-l-4 pl-3\" style={{ borderColor: isSuccess ? '#10B981' : '#EF4444' }}>\r\n            <div className=\"flex items-center font-semibold\" style={{ color: isSuccess ? '#059669' : '#DC2626' }}>\r\n                {isSuccess ? <FaCheckCircle className=\"mr-2\" /> : <FaExclamationCircle className=\"mr-2\" />}\r\n                {log.status} - <span className=\"font-normal text-gray-500 ml-1\">{formatDate(log.lastFetchTime)}</span>\r\n            </div>\r\n            <p className=\"text-gray-600 mt-1\">\r\n                Source: <span className=\"font-medium\">{log.triggerSource}</span>. Details: {log.details}\r\n            </p>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default ApiStatusBlock;\r\n","import React, { useState } from 'react';\r\n\r\nconst PasswordPromptModal = ({ isOpen, onClose, onConfirm, title, isLoading }) => {\r\n    const [password, setPassword] = useState('');\r\n\r\n    if (!isOpen) return null;\r\n\r\n    const handleConfirm = () => {\r\n        onConfirm(password);\r\n        setPassword('');\r\n    };\r\n    \r\n    const handleClose = () => {\r\n        setPassword('');\r\n        onClose();\r\n    };\r\n\r\n    return (\r\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 z-40 flex justify-center items-center\">\r\n            <div className=\"bg-white rounded-lg shadow-xl p-6 w-full max-w-md\">\r\n                <h3 className=\"text-lg font-bold text-gray-800 mb-4\">{title}</h3>\r\n                <p className=\"text-sm text-gray-600 mb-4\">\r\n                    This is a destructive action. To confirm, please enter your admin password.\r\n                </p>\r\n                <input\r\n                    type=\"password\"\r\n                    value={password}\r\n                    onChange={(e) => setPassword(e.target.value)}\r\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-red-500\"\r\n                    placeholder=\"Enter your password\"\r\n                    autoFocus\r\n                />\r\n                <div className=\"flex justify-end mt-6 space-x-3\">\r\n                    <button\r\n                        onClick={handleClose}\r\n                        disabled={isLoading}\r\n                        className=\"px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 transition\"\r\n                    >\r\n                        Cancel\r\n                    </button>\r\n                    <button\r\n                        onClick={handleConfirm}\r\n                        disabled={!password || isLoading}\r\n                        className=\"px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 transition disabled:opacity-50 disabled:cursor-wait\"\r\n                    >\r\n                        {isLoading ? 'Flushing...' : 'Confirm & Flush'}\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PasswordPromptModal;\r\n","import React, { useState, useEffect, useCallback } from 'react';\r\nimport { getApiStatusHistory, refreshMovers, refreshIndices, flushMovers, flushIndices } from '../apiConfig';\r\nimport ApiStatusBlock from './ApiStatusBlock';\r\nimport PasswordPromptModal from './PasswordPromptModal';\r\n\r\nconst ApiStatusPanel = () => {\r\n    const [logs, setLogs] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [modalState, setModalState] = useState({ isOpen: false, onConfirm: null, title: '' });\r\n    const [isActionLoading, setIsActionLoading] = useState(false);\r\n\r\n\r\n    const fetchLogs = useCallback(async () => {\r\n        setIsLoading(true);\r\n        try {\r\n            const response = await getApiStatusHistory();\r\n            setLogs(response.data);\r\n        } catch (error) {\r\n            console.error(\"Failed to fetch API status history:\", error);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        fetchLogs();\r\n    }, [fetchLogs]);\r\n\r\n    const handleFlushRequest = (flushHandler, title) => {\r\n        setModalState({ \r\n            isOpen: true, \r\n            onConfirm: (password) => flushHandler(password), \r\n            title: title \r\n        });\r\n    };\r\n    \r\n    const handleModalConfirm = async (password) => {\r\n        if (modalState.onConfirm) {\r\n            setIsActionLoading(true);\r\n            try {\r\n                await modalState.onConfirm(password);\r\n            } catch (error) {\r\n                console.error(\"Action failed:\", error);\r\n                alert(`Action failed: ${error.response?.data?.message || error.message}`);\r\n            } finally {\r\n                setIsActionLoading(false);\r\n                setModalState({ isOpen: false, onConfirm: null, title: '' });\r\n                await fetchLogs(); // Refresh logs after action\r\n            }\r\n        }\r\n    };\r\n    \r\n\r\n    const blockConfigs = [\r\n        {\r\n            title: \"US Market Indices (Charts)\",\r\n            logFilters: [\"Market Chart\"],\r\n            onRefresh: refreshIndices,\r\n            flushHandler: flushIndices,\r\n            nextRefreshTime: null\r\n        },\r\n        {\r\n            title: \"Top Gainers (US)\",\r\n            logFilters: [\"Market Data - Top Gainers (US)\"],\r\n            onRefresh: refreshMovers,\r\n            flushHandler: flushMovers,\r\n            nextRefreshTime: getNextScheduledTime(22, 0, \"UTC\")\r\n        },\r\n        {\r\n            title: \"Top Losers (US)\",\r\n            logFilters: [\"Market Data - Top Losers (US)\"],\r\n            onRefresh: refreshMovers,\r\n            flushHandler: flushMovers,\r\n            nextRefreshTime: getNextScheduledTime(22, 0, \"UTC\")\r\n        },\r\n        {\r\n            title: \"Most Active (US)\",\r\n            logFilters: [\"Market Data - Most Active (US)\"],\r\n            onRefresh: refreshMovers,\r\n            flushHandler: flushMovers,\r\n            nextRefreshTime: getNextScheduledTime(22, 0, \"UTC\")\r\n        }\r\n    ];\r\n\r\n    const filterLogs = (filters) => {\r\n        return logs.filter(log => filters.some(filter => log.apiName.includes(filter)));\r\n    };\r\n\r\n    return (\r\n        <div className=\"bg-gray-50 p-4 sm:p-6 lg:p-8\">\r\n             <h2 className=\"text-2xl font-bold mb-6 text-gray-800\">API Status & Control Center</h2>\r\n            {isLoading ? <p>Loading logs...</p> : (\r\n                <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n                    {blockConfigs.map((config) => (\r\n                        <ApiStatusBlock\r\n                            key={config.title}\r\n                            title={config.title}\r\n                            logs={filterLogs(config.logFilters)}\r\n                            onRefresh={config.onRefresh}\r\n                            onFlush={(handler) => handleFlushRequest((password) => handler(password, config.flushHandler), `Flush ${config.title}`)}\r\n                            nextRefreshTime={config.nextRefreshTime}\r\n                        />\r\n                    ))}\r\n                </div>\r\n            )}\r\n            <PasswordPromptModal\r\n                isOpen={modalState.isOpen}\r\n                onClose={() => setModalState({ ...modalState, isOpen: false })}\r\n                onConfirm={handleModalConfirm}\r\n                title={modalState.title}\r\n                isLoading={isActionLoading}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nfunction getNextScheduledTime(hour, minute, timeZone) {\r\n    const now = new Date();\r\n    let nextRefresh = new Date();\r\n    \r\n    nextRefresh.setUTCHours(hour, minute, 0, 0);\r\n\r\n    if (now.getTime() > nextRefresh.getTime()) {\r\n        nextRefresh.setUTCDate(nextRefresh.getUTCDate() + 1);\r\n    }\r\n    \r\n    // This doesn't account for MON-FRI, but is fine for a countdown.\r\n    return nextRefresh;\r\n}\r\n\r\n\r\nexport default ApiStatusPanel;","import React, { useEffect, useState, useMemo } from 'react';\r\nimport { useAuth } from '../context/AuthContext';\r\nimport { getAllPostsForAdmin as getPosts } from '../apiConfig';\r\nimport { FaLinkedin, FaFileAlt, FaEye, FaPlusSquare } from 'react-icons/fa';\r\nimport { Link } from 'react-router-dom';\r\nimport ResponsiveAuthImage from '../components/ResponsiveAuthImage';\r\nimport ApiStatusPanel from '../components/ApiStatusPanel';\r\n\r\nconst StatCard = ({ icon, title, value, color }) => (\r\n    <div className=\"bg-white p-6 rounded-lg shadow-sm flex items-center\">\r\n        <div className={`p-3 rounded-full mr-4 ${color}`}>\r\n            {icon}\r\n        </div>\r\n        <div>\r\n            <p className=\"text-sm text-gray-500 font-medium\">{title}</p>\r\n            <p className=\"text-2xl font-bold text-gray-800\">{value}</p>\r\n        </div>\r\n    </div>\r\n);\r\n\r\nconst DashboardPage = () => {\r\n    const { user } = useAuth();\r\n    const [posts, setPosts] = useState([]);\r\n    const [error, setError] = useState('');\r\n    const API_URL = process.env.REACT_APP_API_BASE_URL || 'https://backend.treishvaamgroup.com';\r\n    const linkedInAuthUrl = `${API_URL}/oauth2/authorization/linkedin`;\r\n\r\n    useEffect(() => {\r\n        const fetchPostsForStats = async () => {\r\n            try {\r\n                const response = await getPosts();\r\n                setPosts(response.data);\r\n            } catch (err) {\r\n                setError('Could not load dashboard data.');\r\n                console.error(err);\r\n            }\r\n        };\r\n        fetchPostsForStats();\r\n        const intervalId = setInterval(fetchPostsForStats, 30000);\r\n\r\n        return () => clearInterval(intervalId);\r\n    }, []);\r\n\r\n    const recentPosts = useMemo(() => {\r\n        return [...posts]\r\n            .filter(p => p.status === 'PUBLISHED')\r\n            .sort((a, b) => new Date(b.updatedAt || b.createdAt) - new Date(a.updatedAt || a.createdAt))\r\n            .slice(0, 5);\r\n    }, [posts]);\r\n\r\n    const totalPublishedPosts = useMemo(() => posts.filter(p => p.status === 'PUBLISHED').length, [posts]);\r\n    const totalScheduledPosts = useMemo(() => posts.filter(p => p.status === 'SCHEDULED').length, [posts]);\r\n\r\n    return (\r\n        <div className=\"container mx-auto p-6 md:p-8\">\r\n            <h1 className=\"text-3xl font-bold text-gray-800 mb-6\">Welcome, {user?.name || 'Admin'}!</h1>\r\n\r\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 mb-8\">\r\n                <StatCard icon={<FaFileAlt className=\"text-white\" />} title=\"Published Posts\" value={totalPublishedPosts} color=\"bg-sky-500\" />\r\n                <StatCard icon={<FaEye className=\"text-white\" />} title=\"Scheduled Posts\" value={totalScheduledPosts} color=\"bg-amber-500\" />\r\n            </div>\r\n\r\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\r\n                <div className=\"lg:col-span-1 space-y-6\">\r\n                    <ApiStatusPanel />\r\n                    <div className=\"bg-white p-6 rounded-lg shadow-sm\">\r\n                        <h2 className=\"text-xl font-semibold mb-4 text-gray-700\">Quick Actions</h2>\r\n                        <Link to=\"/dashboard/blog/new\" className=\"w-full flex items-center justify-center bg-sky-600 text-white font-bold py-3 px-4 rounded-lg hover:bg-sky-700 transition duration-300\">\r\n                            <FaPlusSquare className=\"mr-2\" /> Create New Post\r\n                        </Link>\r\n                    </div>\r\n\r\n                    <div className=\"bg-white p-6 rounded-lg shadow-sm\">\r\n                        <h2 className=\"text-xl font-semibold mb-4 text-gray-700\">Integrations</h2>\r\n                        <div className=\"flex items-center justify-between\">\r\n                            <div className=\"flex items-center\">\r\n                                <FaLinkedin className=\"text-2xl text-blue-700 mr-3\" />\r\n                                <span className=\"font-medium\">LinkedIn</span>\r\n                            </div>\r\n                            {user && user.linkedinConnected ? (\r\n                                <span className=\"px-3 py-1 bg-green-100 text-green-800 rounded-full text-sm font-semibold\">\r\n                                    Connected\r\n                                </span>\r\n                            ) : (\r\n                                <a href={linkedInAuthUrl} className=\"bg-blue-600 text-white font-bold py-2 px-4 rounded-lg hover:bg-blue-700 transition duration-300\">\r\n                                    Connect\r\n                                </a>\r\n                            )}\r\n                        </div>\r\n                        <p className=\"text-xs text-gray-500 mt-4\">\r\n                            Connect your LinkedIn account to enable direct sharing of blog posts.\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"lg:col-span-2 bg-white p-6 rounded-lg shadow-sm\">\r\n                    <h2 className=\"text-xl font-semibold mb-4 text-gray-700\">Recent Posts</h2>\r\n                    <div className=\"space-y-4\">\r\n                        {error && <p className=\"text-red-500\">{error}</p>}\r\n                        {recentPosts.length > 0 ? (\r\n                            recentPosts.map(post => (\r\n                                <div key={post.id} className=\"flex items-center justify-between p-3 hover:bg-gray-50 rounded-lg\">\r\n                                    <div className=\"flex items-center\">\r\n                                        <div className=\"w-12 h-12 flex-shrink-0 mr-4\">\r\n                                            <ResponsiveAuthImage\r\n                                                baseName={post.thumbnails && post.thumbnails.length > 0 ? post.thumbnails[0].imageUrl : null}\r\n                                                alt={post.title}\r\n                                                className=\"w-full h-full rounded-lg object-cover\"\r\n                                                sizes=\"48px\"\r\n                                            />\r\n                                        </div>\r\n                                        <div>\r\n                                            <p className=\"font-semibold text-gray-800\">{post.title}</p>\r\n                                            <p className=\"text-xs text-gray-500\">\r\n                                                Published on {new Date(post.updatedAt || post.createdAt).toLocaleDateString()}\r\n                                            </p>\r\n                                        </div>\r\n                                    </div>\r\n                                    <Link to={`/dashboard/blog/edit/${post.userFriendlySlug}/${post.id}`} className=\"text-sky-600 hover:underline text-sm font-semibold\">\r\n                                        Edit\r\n                                    </Link>\r\n                                </div>\r\n                            ))\r\n                        ) : (\r\n                            !error && <p className=\"text-center text-gray-500 py-4\">No recent posts to display.</p>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DashboardPage;"],"names":["_ref","baseName","alt","className","sizes","onLoad","_jsx","concat","match","console","warn","cleanedBaseName","src","API_URL","placeholderSrc","srcSet","join","LazyLoadImage","effect","afterLoad","getReturnValues","countDown","hours","minutes","seconds","isFinished","Math","floor","LogItem","_ref2","log","isSuccess","status","_jsxs","style","borderColor","children","color","FaCheckCircle","FaExclamationCircle","dateString","lastFetchTime","Date","toLocaleString","triggerSource","details","title","logs","onRefresh","onFlush","nextRefreshTime","isRefreshing","setIsRefreshing","useState","isFlushing","setIsFlushing","showAllLogs","setShowAllLogs","targetTime","countDownDate","useMemo","getTime","setCountDown","useEffect","interval","setInterval","clearInterval","useCountdown","handleFlush","async","password","flushFn","error","formatTime","t","toString","padStart","countdownText","logsToShow","slice","onClick","disabled","FaSync","FaTrash","length","map","id","FaChevronUp","FaChevronDown","isOpen","onClose","onConfirm","isLoading","setPassword","type","value","onChange","e","target","placeholder","autoFocus","handleClose","handleConfirm","getNextScheduledTime","hour","minute","timeZone","now","nextRefresh","setUTCHours","setUTCDate","getUTCDate","ApiStatusPanel","setLogs","setIsLoading","modalState","setModalState","isActionLoading","setIsActionLoading","fetchLogs","useCallback","response","getApiStatusHistory","data","blockConfigs","logFilters","refreshIndices","flushHandler","flushIndices","refreshMovers","flushMovers","config","ApiStatusBlock","filters","filter","some","apiName","includes","handler","handleFlushRequest","PasswordPromptModal","_objectSpread","_error$response","_error$response$data","alert","message","StatCard","icon","DashboardPage","user","useAuth","posts","setPosts","setError","linkedInAuthUrl","process","REACT_APP_API_BASE_URL","fetchPostsForStats","getPosts","err","intervalId","recentPosts","p","sort","a","b","updatedAt","createdAt","totalPublishedPosts","totalScheduledPosts","name","FaFileAlt","FaEye","Link","to","FaPlusSquare","FaLinkedin","linkedinConnected","href","post","ResponsiveAuthImage","thumbnails","imageUrl","toLocaleDateString","userFriendlySlug"],"sourceRoot":""}