{"version":3,"file":"static/js/40.3ff551fc.chunk.js","mappings":"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","sources":["../node_modules/blurhash/src/base83.ts","../node_modules/blurhash/src/utils.ts","../node_modules/blurhash/src/error.ts","../node_modules/blurhash/src/decode.ts","components/ResponsiveAuthImage.js","hooks/useCountdown.js","components/ApiStatusBlock.js","components/PasswordPromptModal.js","components/ApiStatusPanel.js","pages/DashboardPage.js"],"sourcesContent":["const digitCharacters = [\n  \"0\",\n  \"1\",\n  \"2\",\n  \"3\",\n  \"4\",\n  \"5\",\n  \"6\",\n  \"7\",\n  \"8\",\n  \"9\",\n  \"A\",\n  \"B\",\n  \"C\",\n  \"D\",\n  \"E\",\n  \"F\",\n  \"G\",\n  \"H\",\n  \"I\",\n  \"J\",\n  \"K\",\n  \"L\",\n  \"M\",\n  \"N\",\n  \"O\",\n  \"P\",\n  \"Q\",\n  \"R\",\n  \"S\",\n  \"T\",\n  \"U\",\n  \"V\",\n  \"W\",\n  \"X\",\n  \"Y\",\n  \"Z\",\n  \"a\",\n  \"b\",\n  \"c\",\n  \"d\",\n  \"e\",\n  \"f\",\n  \"g\",\n  \"h\",\n  \"i\",\n  \"j\",\n  \"k\",\n  \"l\",\n  \"m\",\n  \"n\",\n  \"o\",\n  \"p\",\n  \"q\",\n  \"r\",\n  \"s\",\n  \"t\",\n  \"u\",\n  \"v\",\n  \"w\",\n  \"x\",\n  \"y\",\n  \"z\",\n  \"#\",\n  \"$\",\n  \"%\",\n  \"*\",\n  \"+\",\n  \",\",\n  \"-\",\n  \".\",\n  \":\",\n  \";\",\n  \"=\",\n  \"?\",\n  \"@\",\n  \"[\",\n  \"]\",\n  \"^\",\n  \"_\",\n  \"{\",\n  \"|\",\n  \"}\",\n  \"~\",\n];\n\nexport const decode83 = (str: String) => {\n  let value = 0;\n  for (let i = 0; i < str.length; i++) {\n    const c = str[i];\n    const digit = digitCharacters.indexOf(c);\n    value = value * 83 + digit;\n  }\n  return value;\n};\n\nexport const encode83 = (n: number, length: number): string => {\n  var result = \"\";\n  for (let i = 1; i <= length; i++) {\n    let digit = (Math.floor(n) / Math.pow(83, length - i)) % 83;\n    result += digitCharacters[Math.floor(digit)];\n  }\n  return result;\n};\n","export const sRGBToLinear = (value: number) => {\n  let v = value / 255;\n  if (v <= 0.04045) {\n    return v / 12.92;\n  } else {\n    return Math.pow((v + 0.055) / 1.055, 2.4);\n  }\n};\n\nexport const linearTosRGB = (value: number) => {\n  let v = Math.max(0, Math.min(1, value));\n  if (v <= 0.0031308) {\n    return Math.trunc(v * 12.92 * 255 + 0.5);\n  } else {\n    return Math.trunc((1.055 * Math.pow(v, 1 / 2.4) - 0.055) * 255 + 0.5);\n  }\n};\n\nexport const sign = (n: number) => (n < 0 ? -1 : 1);\n\nexport const signPow = (val: number, exp: number) =>\n  sign(val) * Math.pow(Math.abs(val), exp);\n","export class ValidationError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = \"ValidationError\";\n    this.message = message;\n  }\n}\n","import { decode83 } from \"./base83\";\nimport { sRGBToLinear, signPow, linearTosRGB } from \"./utils\";\nimport { ValidationError } from \"./error\";\n\n/**\n * Returns an error message if invalid or undefined if valid\n * @param blurhash\n */\nconst validateBlurhash = (blurhash: string) => {\n  if (!blurhash || blurhash.length < 6) {\n    throw new ValidationError(\n      \"The blurhash string must be at least 6 characters\"\n    );\n  }\n\n  const sizeFlag = decode83(blurhash[0]);\n  const numY = Math.floor(sizeFlag / 9) + 1;\n  const numX = (sizeFlag % 9) + 1;\n\n  if (blurhash.length !== 4 + 2 * numX * numY) {\n    throw new ValidationError(\n      `blurhash length mismatch: length is ${\n        blurhash.length\n      } but it should be ${4 + 2 * numX * numY}`\n    );\n  }\n};\n\nexport const isBlurhashValid = (\n  blurhash: string\n): { result: boolean; errorReason?: string } => {\n  try {\n    validateBlurhash(blurhash);\n  } catch (error) {\n    return { result: false, errorReason: error.message };\n  }\n\n  return { result: true };\n};\n\nconst decodeDC = (value: number) => {\n  const intR = value >> 16;\n  const intG = (value >> 8) & 255;\n  const intB = value & 255;\n  return [sRGBToLinear(intR), sRGBToLinear(intG), sRGBToLinear(intB)];\n};\n\nconst decodeAC = (value: number, maximumValue: number) => {\n  const quantR = Math.floor(value / (19 * 19));\n  const quantG = Math.floor(value / 19) % 19;\n  const quantB = value % 19;\n\n  const rgb = [\n    signPow((quantR - 9) / 9, 2.0) * maximumValue,\n    signPow((quantG - 9) / 9, 2.0) * maximumValue,\n    signPow((quantB - 9) / 9, 2.0) * maximumValue,\n  ];\n\n  return rgb;\n};\n\nconst decode = (\n  blurhash: string,\n  width: number,\n  height: number,\n  punch?: number\n) => {\n  validateBlurhash(blurhash);\n\n  punch = punch | 1;\n\n  const sizeFlag = decode83(blurhash[0]);\n  const numY = Math.floor(sizeFlag / 9) + 1;\n  const numX = (sizeFlag % 9) + 1;\n\n  const quantisedMaximumValue = decode83(blurhash[1]);\n  const maximumValue = (quantisedMaximumValue + 1) / 166;\n\n  const colors = new Array(numX * numY);\n\n  for (let i = 0; i < colors.length; i++) {\n    if (i === 0) {\n      const value = decode83(blurhash.substring(2, 6));\n      colors[i] = decodeDC(value);\n    } else {\n      const value = decode83(blurhash.substring(4 + i * 2, 6 + i * 2));\n      colors[i] = decodeAC(value, maximumValue * punch);\n    }\n  }\n\n  const bytesPerRow = width * 4;\n  const pixels = new Uint8ClampedArray(bytesPerRow * height);\n\n  for (let y = 0; y < height; y++) {\n    for (let x = 0; x < width; x++) {\n      let r = 0;\n      let g = 0;\n      let b = 0;\n\n      for (let j = 0; j < numY; j++) {\n        for (let i = 0; i < numX; i++) {\n          const basis =\n            Math.cos((Math.PI * x * i) / width) *\n            Math.cos((Math.PI * y * j) / height);\n          let color = colors[i + j * numX];\n          r += color[0] * basis;\n          g += color[1] * basis;\n          b += color[2] * basis;\n        }\n      }\n\n      let intR = linearTosRGB(r);\n      let intG = linearTosRGB(g);\n      let intB = linearTosRGB(b);\n\n      pixels[4 * x + 0 + y * bytesPerRow] = intR;\n      pixels[4 * x + 1 + y * bytesPerRow] = intG;\n      pixels[4 * x + 2 + y * bytesPerRow] = intB;\n      pixels[4 * x + 3 + y * bytesPerRow] = 255; // alpha\n    }\n  }\n  return pixels;\n};\n\nexport default decode;\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport { LazyLoadImage } from 'react-lazy-load-image-component';\r\nimport 'react-lazy-load-image-component/src/effects/opacity.css'; // Using opacity for a smoother transition\r\nimport { API_URL } from '../apiConfig';\r\nimport { decode } from 'blurhash';\r\n\r\n// --- NEW COMPONENT ---\r\n// This component decodes the blurhash and draws it to a canvas.\r\nconst BlurHashCanvas = ({ hash, width, height, punch = 1 }) => {\r\n    const canvasRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        if (canvasRef.current && hash && width && height) {\r\n            try {\r\n                const pixels = decode(hash, width, height, punch);\r\n                const ctx = canvasRef.current.getContext(\"2d\");\r\n                if (ctx) {\r\n                    const imageData = ctx.createImageData(width, height);\r\n                    imageData.data.set(pixels);\r\n                    ctx.putImageData(imageData, 0, 0);\r\n                }\r\n            } catch (error) {\r\n                console.error(\"Failed to decode blurhash\", error);\r\n            }\r\n        }\r\n    }, [hash, width, height, punch]);\r\n\r\n    if (!hash || !width || !height) return null;\r\n\r\n    return (\r\n        <canvas\r\n            ref={canvasRef}\r\n            width={width}\r\n            height={height}\r\n            className=\"absolute inset-0 w-full h-full\"\r\n        />\r\n    );\r\n};\r\n\r\n\r\nconst ResponsiveAuthImage = ({ baseName, alt, className, sizes, onLoad, eager = false, width, height, blurHash }) => {\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n\r\n    const handleImageLoad = () => {\r\n        setIsLoaded(true);\r\n        if (onLoad) {\r\n            onLoad();\r\n        }\r\n    };\r\n\r\n    if (!baseName || typeof baseName !== 'string') {\r\n        return <div className={`bg-gray-200 ${className}`} style={{ aspectRatio: width && height ? `${width}/${height}` : '1' }} />;\r\n    }\r\n\r\n    const uuidRegex = /([a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12})/;\r\n    const match = baseName.match(uuidRegex);\r\n\r\n    if (!match) {\r\n        console.warn(`ResponsiveAuthImage: Could not extract a valid image ID from baseName: \"${baseName}\"`);\r\n        return <div className={`bg-gray-200 ${className}`} style={{ aspectRatio: width && height ? `${width}/${height}` : '1' }} />;\r\n    }\r\n\r\n    const cleanedBaseName = match[0];\r\n\r\n    const src = `${API_URL}/api/uploads/${cleanedBaseName}-small.webp`;\r\n    const srcSet = [\r\n        `${API_URL}/api/uploads/${cleanedBaseName}-small.webp 300w`,\r\n        `${API_URL}/api/uploads/${cleanedBaseName}-medium.webp 600w`,\r\n        `${API_URL}/api/uploads/${cleanedBaseName}.webp 1200w`\r\n    ].join(', ');\r\n\r\n    const imageProps = {\r\n        alt,\r\n        src,\r\n        srcSet,\r\n        sizes,\r\n        className: `transition-opacity duration-300 ${isLoaded ? 'opacity-100' : 'opacity-0'} ${className}`,\r\n        width,\r\n        height,\r\n    };\r\n\r\n    if (eager) {\r\n        return (\r\n            <img\r\n                {...imageProps}\r\n                className={className} // No opacity transition for eager images\r\n                onLoad={handleImageLoad}\r\n                fetchPriority=\"high\"\r\n            />\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"relative w-full h-full overflow-hidden\">\r\n            {/* Show BlurHash canvas only if image is not yet loaded */}\r\n            {!isLoaded && blurHash && <BlurHashCanvas hash={blurHash} width={32} height={32} />}\r\n\r\n            <LazyLoadImage\r\n                {...imageProps}\r\n                effect=\"opacity\"\r\n                afterLoad={handleImageLoad}\r\n            // We use our BlurHashCanvas as the placeholder, so no placeholderSrc is needed here.\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ResponsiveAuthImage;","import { useState, useEffect, useMemo } from 'react';\r\n\r\nconst useCountdown = (targetTime) => {\r\n    const countDownDate = useMemo(() => new Date(targetTime).getTime(), [targetTime]);\r\n\r\n    const [countDown, setCountDown] = useState(\r\n        countDownDate - new Date().getTime()\r\n    );\r\n\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            setCountDown(countDownDate - new Date().getTime());\r\n        }, 1000);\r\n\r\n        return () => clearInterval(interval);\r\n    }, [countDownDate]);\r\n\r\n    return getReturnValues(countDown);\r\n};\r\n\r\nconst getReturnValues = (countDown) => {\r\n    if (countDown < 0) {\r\n        return { hours: 0, minutes: 0, seconds: 0, isFinished: true };\r\n    }\r\n    const hours = Math.floor((countDown % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\r\n    const minutes = Math.floor((countDown % (1000 * 60 * 60)) / (1000 * 60));\r\n    const seconds = Math.floor((countDown % (1000 * 60)) / 1000);\r\n\r\n    return { hours, minutes, seconds, isFinished: false };\r\n};\r\n\r\nexport { useCountdown };\r\n","import React, { useState } from 'react';\r\nimport { FaSync, FaTrash, FaCheckCircle, FaExclamationCircle, FaChevronDown, FaChevronUp } from 'react-icons/fa';\r\nimport { useCountdown } from '../hooks/useCountdown';\r\n\r\nconst ApiStatusBlock = ({ title, logs, onRefresh, onFlush, nextRefreshTime }) => {\r\n    const [isRefreshing, setIsRefreshing] = useState(false);\r\n    const [isFlushing, setIsFlushing] = useState(false);\r\n    const [showAllLogs, setShowAllLogs] = useState(false);\r\n    const { hours, minutes, seconds, isFinished } = useCountdown(nextRefreshTime);\r\n\r\n    const handleRefresh = async () => {\r\n        setIsRefreshing(true);\r\n        await onRefresh();\r\n        setIsRefreshing(false);\r\n    };\r\n\r\n    const handleFlush = async (password, flushFn) => {\r\n        setIsFlushing(true);\r\n        try {\r\n            await flushFn(password);\r\n        } catch (error) {\r\n            console.error(\"Flush failed:\", error);\r\n            // Optionally, show an error toast to the user\r\n        }\r\n        setIsFlushing(false);\r\n    };\r\n\r\n    const formatTime = (t) => t.toString().padStart(2, '0');\r\n\r\n    const countdownText = isFinished\r\n        ? \"Refresh due\"\r\n        : `${formatTime(hours)}h ${formatTime(minutes)}m ${formatTime(seconds)}s`;\r\n\r\n    const logsToShow = showAllLogs ? logs : logs.slice(0, 3);\r\n\r\n    return (\r\n        <div className=\"bg-white p-6 rounded-xl shadow-md border border-gray-200\">\r\n            <div className=\"flex justify-between items-center mb-4\">\r\n                <h3 className=\"text-lg font-bold text-gray-800\">{title}</h3>\r\n                <div className=\"flex items-center space-x-2\">\r\n                    <button\r\n                        onClick={handleRefresh}\r\n                        disabled={isRefreshing}\r\n                        className=\"p-2 text-sm text-sky-600 bg-sky-100 hover:bg-sky-200 rounded-full transition disabled:opacity-50 disabled:cursor-wait\"\r\n                        title=\"Refresh Data Now\"\r\n                    >\r\n                        <FaSync className={isRefreshing ? 'animate-spin' : ''} />\r\n                    </button>\r\n                    <button\r\n                        onClick={() => onFlush(handleFlush)}\r\n                        disabled={isFlushing}\r\n                        className=\"p-2 text-sm text-red-600 bg-red-100 hover:bg-red-200 rounded-full transition disabled:opacity-50\"\r\n                        title=\"Flush Cached Data\"\r\n                    >\r\n                        <FaTrash />\r\n                    </button>\r\n                </div>\r\n            </div>\r\n\r\n            {nextRefreshTime && (\r\n                 <p className=\"text-xs text-gray-500 mb-4\">\r\n                    Auto-refresh in: <span className=\"font-semibold text-gray-600\">{countdownText}</span>\r\n                </p>\r\n            )}\r\n\r\n            <div className=\"space-y-3\">\r\n                {logsToShow.length > 0 ? logsToShow.map(log => (\r\n                    <LogItem key={log.id} log={log} />\r\n                )) : (\r\n                    <p className=\"text-sm text-gray-500 text-center py-4\">No logs available.</p>\r\n                )}\r\n            </div>\r\n\r\n            {logs.length > 3 && (\r\n                <button \r\n                    onClick={() => setShowAllLogs(!showAllLogs)}\r\n                    className=\"text-sm text-sky-600 font-semibold mt-4 flex items-center\"\r\n                >\r\n                    {showAllLogs ? 'Show Recent Logs' : 'Show All Logs'}\r\n                    {showAllLogs ? <FaChevronUp className=\"ml-2\" /> : <FaChevronDown className=\"ml-2\" />}\r\n                </button>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst LogItem = ({ log }) => {\r\n    const isSuccess = log.status === 'SUCCESS';\r\n    const formatDate = (dateString) => new Date(dateString).toLocaleString();\r\n\r\n    return (\r\n        <div className=\"text-xs border-l-4 pl-3\" style={{ borderColor: isSuccess ? '#10B981' : '#EF4444' }}>\r\n            <div className=\"flex items-center font-semibold\" style={{ color: isSuccess ? '#059669' : '#DC2626' }}>\r\n                {isSuccess ? <FaCheckCircle className=\"mr-2\" /> : <FaExclamationCircle className=\"mr-2\" />}\r\n                {log.status} - <span className=\"font-normal text-gray-500 ml-1\">{formatDate(log.lastFetchTime)}</span>\r\n            </div>\r\n            <p className=\"text-gray-600 mt-1\">\r\n                Source: <span className=\"font-medium\">{log.triggerSource}</span>. Details: {log.details}\r\n            </p>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default ApiStatusBlock;\r\n","import React, { useState } from 'react';\r\n\r\nconst PasswordPromptModal = ({ isOpen, onClose, onConfirm, title, isLoading }) => {\r\n    const [password, setPassword] = useState('');\r\n\r\n    if (!isOpen) return null;\r\n\r\n    const handleConfirm = () => {\r\n        onConfirm(password);\r\n        setPassword('');\r\n    };\r\n    \r\n    const handleClose = () => {\r\n        setPassword('');\r\n        onClose();\r\n    };\r\n\r\n    return (\r\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 z-40 flex justify-center items-center\">\r\n            <div className=\"bg-white rounded-lg shadow-xl p-6 w-full max-w-md\">\r\n                <h3 className=\"text-lg font-bold text-gray-800 mb-4\">{title}</h3>\r\n                <p className=\"text-sm text-gray-600 mb-4\">\r\n                    This is a destructive action. To confirm, please enter your admin password.\r\n                </p>\r\n                <input\r\n                    type=\"password\"\r\n                    value={password}\r\n                    onChange={(e) => setPassword(e.target.value)}\r\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-red-500\"\r\n                    placeholder=\"Enter your password\"\r\n                    autoFocus\r\n                />\r\n                <div className=\"flex justify-end mt-6 space-x-3\">\r\n                    <button\r\n                        onClick={handleClose}\r\n                        disabled={isLoading}\r\n                        className=\"px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 transition\"\r\n                    >\r\n                        Cancel\r\n                    </button>\r\n                    <button\r\n                        onClick={handleConfirm}\r\n                        disabled={!password || isLoading}\r\n                        className=\"px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 transition disabled:opacity-50 disabled:cursor-wait\"\r\n                    >\r\n                        {isLoading ? 'Flushing...' : 'Confirm & Flush'}\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PasswordPromptModal;\r\n","import React, { useState, useEffect, useCallback } from 'react';\r\nimport { getApiStatusHistory, refreshMovers, refreshIndices, flushMovers, flushIndices } from '../apiConfig';\r\nimport ApiStatusBlock from './ApiStatusBlock';\r\nimport PasswordPromptModal from './PasswordPromptModal';\r\n\r\nconst ApiStatusPanel = () => {\r\n    const [logs, setLogs] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [modalState, setModalState] = useState({ isOpen: false, onConfirm: null, title: '' });\r\n    const [isActionLoading, setIsActionLoading] = useState(false);\r\n\r\n\r\n    const fetchLogs = useCallback(async () => {\r\n        setIsLoading(true);\r\n        try {\r\n            const response = await getApiStatusHistory();\r\n            setLogs(response.data);\r\n        } catch (error) {\r\n            console.error(\"Failed to fetch API status history:\", error);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        fetchLogs();\r\n    }, [fetchLogs]);\r\n\r\n    const handleFlushRequest = (flushHandler, title) => {\r\n        setModalState({ \r\n            isOpen: true, \r\n            onConfirm: (password) => flushHandler(password), \r\n            title: title \r\n        });\r\n    };\r\n    \r\n    const handleModalConfirm = async (password) => {\r\n        if (modalState.onConfirm) {\r\n            setIsActionLoading(true);\r\n            try {\r\n                await modalState.onConfirm(password);\r\n            } catch (error) {\r\n                console.error(\"Action failed:\", error);\r\n                alert(`Action failed: ${error.response?.data?.message || error.message}`);\r\n            } finally {\r\n                setIsActionLoading(false);\r\n                setModalState({ isOpen: false, onConfirm: null, title: '' });\r\n                await fetchLogs(); // Refresh logs after action\r\n            }\r\n        }\r\n    };\r\n    \r\n\r\n    const blockConfigs = [\r\n        {\r\n            title: \"US Market Indices (Charts)\",\r\n            logFilters: [\"Market Chart\"],\r\n            onRefresh: refreshIndices,\r\n            flushHandler: flushIndices,\r\n            nextRefreshTime: null\r\n        },\r\n        {\r\n            title: \"Top Gainers (US)\",\r\n            logFilters: [\"Market Data - Top Gainers (US)\"],\r\n            onRefresh: refreshMovers,\r\n            flushHandler: flushMovers,\r\n            nextRefreshTime: getNextScheduledTime(22, 0, \"UTC\")\r\n        },\r\n        {\r\n            title: \"Top Losers (US)\",\r\n            logFilters: [\"Market Data - Top Losers (US)\"],\r\n            onRefresh: refreshMovers,\r\n            flushHandler: flushMovers,\r\n            nextRefreshTime: getNextScheduledTime(22, 0, \"UTC\")\r\n        },\r\n        {\r\n            title: \"Most Active (US)\",\r\n            logFilters: [\"Market Data - Most Active (US)\"],\r\n            onRefresh: refreshMovers,\r\n            flushHandler: flushMovers,\r\n            nextRefreshTime: getNextScheduledTime(22, 0, \"UTC\")\r\n        }\r\n    ];\r\n\r\n    const filterLogs = (filters) => {\r\n        return logs.filter(log => filters.some(filter => log.apiName.includes(filter)));\r\n    };\r\n\r\n    return (\r\n        <div className=\"bg-gray-50 p-4 sm:p-6 lg:p-8\">\r\n             <h2 className=\"text-2xl font-bold mb-6 text-gray-800\">API Status & Control Center</h2>\r\n            {isLoading ? <p>Loading logs...</p> : (\r\n                <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n                    {blockConfigs.map((config) => (\r\n                        <ApiStatusBlock\r\n                            key={config.title}\r\n                            title={config.title}\r\n                            logs={filterLogs(config.logFilters)}\r\n                            onRefresh={config.onRefresh}\r\n                            onFlush={(handler) => handleFlushRequest((password) => handler(password, config.flushHandler), `Flush ${config.title}`)}\r\n                            nextRefreshTime={config.nextRefreshTime}\r\n                        />\r\n                    ))}\r\n                </div>\r\n            )}\r\n            <PasswordPromptModal\r\n                isOpen={modalState.isOpen}\r\n                onClose={() => setModalState({ ...modalState, isOpen: false })}\r\n                onConfirm={handleModalConfirm}\r\n                title={modalState.title}\r\n                isLoading={isActionLoading}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nfunction getNextScheduledTime(hour, minute, timeZone) {\r\n    const now = new Date();\r\n    let nextRefresh = new Date();\r\n    \r\n    nextRefresh.setUTCHours(hour, minute, 0, 0);\r\n\r\n    if (now.getTime() > nextRefresh.getTime()) {\r\n        nextRefresh.setUTCDate(nextRefresh.getUTCDate() + 1);\r\n    }\r\n    \r\n    // This doesn't account for MON-FRI, but is fine for a countdown.\r\n    return nextRefresh;\r\n}\r\n\r\n\r\nexport default ApiStatusPanel;","import React, { useEffect, useState, useMemo } from 'react';\r\nimport { useAuth } from '../context/AuthContext';\r\nimport { getAllPostsForAdmin as getPosts } from '../apiConfig';\r\nimport { FaLinkedin, FaFileAlt, FaEye, FaPlusSquare } from 'react-icons/fa';\r\nimport { Link } from 'react-router-dom';\r\nimport ResponsiveAuthImage from '../components/ResponsiveAuthImage';\r\nimport ApiStatusPanel from '../components/ApiStatusPanel';\r\n\r\nconst StatCard = ({ icon, title, value, color }) => (\r\n    <div className=\"bg-white p-6 rounded-lg shadow-sm flex items-center\">\r\n        <div className={`p-3 rounded-full mr-4 ${color}`}>\r\n            {icon}\r\n        </div>\r\n        <div>\r\n            <p className=\"text-sm text-gray-500 font-medium\">{title}</p>\r\n            <p className=\"text-2xl font-bold text-gray-800\">{value}</p>\r\n        </div>\r\n    </div>\r\n);\r\n\r\nconst DashboardPage = () => {\r\n    const { user } = useAuth();\r\n    const [posts, setPosts] = useState([]);\r\n    const [error, setError] = useState('');\r\n    const API_URL = process.env.REACT_APP_API_BASE_URL || 'https://backend.treishvaamgroup.com';\r\n    const linkedInAuthUrl = `${API_URL}/oauth2/authorization/linkedin`;\r\n\r\n    useEffect(() => {\r\n        const fetchPostsForStats = async () => {\r\n            try {\r\n                const response = await getPosts();\r\n                setPosts(response.data);\r\n            } catch (err) {\r\n                setError('Could not load dashboard data.');\r\n                console.error(err);\r\n            }\r\n        };\r\n        fetchPostsForStats();\r\n        const intervalId = setInterval(fetchPostsForStats, 30000);\r\n\r\n        return () => clearInterval(intervalId);\r\n    }, []);\r\n\r\n    const recentPosts = useMemo(() => {\r\n        return [...posts]\r\n            .filter(p => p.status === 'PUBLISHED')\r\n            .sort((a, b) => new Date(b.updatedAt || b.createdAt) - new Date(a.updatedAt || a.createdAt))\r\n            .slice(0, 5);\r\n    }, [posts]);\r\n\r\n    const totalPublishedPosts = useMemo(() => posts.filter(p => p.status === 'PUBLISHED').length, [posts]);\r\n    const totalScheduledPosts = useMemo(() => posts.filter(p => p.status === 'SCHEDULED').length, [posts]);\r\n\r\n    return (\r\n        <div className=\"container mx-auto p-6 md:p-8\">\r\n            <h1 className=\"text-3xl font-bold text-gray-800 mb-6\">Welcome, {user?.name || 'Admin'}!</h1>\r\n\r\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 mb-8\">\r\n                <StatCard icon={<FaFileAlt className=\"text-white\" />} title=\"Published Posts\" value={totalPublishedPosts} color=\"bg-sky-500\" />\r\n                <StatCard icon={<FaEye className=\"text-white\" />} title=\"Scheduled Posts\" value={totalScheduledPosts} color=\"bg-amber-500\" />\r\n            </div>\r\n\r\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\r\n                <div className=\"lg:col-span-1 space-y-6\">\r\n                    <ApiStatusPanel />\r\n                    <div className=\"bg-white p-6 rounded-lg shadow-sm\">\r\n                        <h2 className=\"text-xl font-semibold mb-4 text-gray-700\">Quick Actions</h2>\r\n                        <Link to=\"/dashboard/blog/new\" className=\"w-full flex items-center justify-center bg-sky-600 text-white font-bold py-3 px-4 rounded-lg hover:bg-sky-700 transition duration-300\">\r\n                            <FaPlusSquare className=\"mr-2\" /> Create New Post\r\n                        </Link>\r\n                    </div>\r\n\r\n                    <div className=\"bg-white p-6 rounded-lg shadow-sm\">\r\n                        <h2 className=\"text-xl font-semibold mb-4 text-gray-700\">Integrations</h2>\r\n                        <div className=\"flex items-center justify-between\">\r\n                            <div className=\"flex items-center\">\r\n                                <FaLinkedin className=\"text-2xl text-blue-700 mr-3\" />\r\n                                <span className=\"font-medium\">LinkedIn</span>\r\n                            </div>\r\n                            {user && user.linkedinConnected ? (\r\n                                <span className=\"px-3 py-1 bg-green-100 text-green-800 rounded-full text-sm font-semibold\">\r\n                                    Connected\r\n                                </span>\r\n                            ) : (\r\n                                <a href={linkedInAuthUrl} className=\"bg-blue-600 text-white font-bold py-2 px-4 rounded-lg hover:bg-blue-700 transition duration-300\">\r\n                                    Connect\r\n                                </a>\r\n                            )}\r\n                        </div>\r\n                        <p className=\"text-xs text-gray-500 mt-4\">\r\n                            Connect your LinkedIn account to enable direct sharing of blog posts.\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"lg:col-span-2 bg-white p-6 rounded-lg shadow-sm\">\r\n                    <h2 className=\"text-xl font-semibold mb-4 text-gray-700\">Recent Posts</h2>\r\n                    <div className=\"space-y-4\">\r\n                        {error && <p className=\"text-red-500\">{error}</p>}\r\n                        {recentPosts.length > 0 ? (\r\n                            recentPosts.map(post => (\r\n                                <div key={post.id} className=\"flex items-center justify-between p-3 hover:bg-gray-50 rounded-lg\">\r\n                                    <div className=\"flex items-center\">\r\n                                        <div className=\"w-12 h-12 flex-shrink-0 mr-4\">\r\n                                            <ResponsiveAuthImage\r\n                                                baseName={post.thumbnails && post.thumbnails.length > 0 ? post.thumbnails[0].imageUrl : null}\r\n                                                alt={post.title}\r\n                                                className=\"w-full h-full rounded-lg object-cover\"\r\n                                                sizes=\"48px\"\r\n                                            />\r\n                                        </div>\r\n                                        <div>\r\n                                            <p className=\"font-semibold text-gray-800\">{post.title}</p>\r\n                                            <p className=\"text-xs text-gray-500\">\r\n                                                Published on {new Date(post.updatedAt || post.createdAt).toLocaleDateString()}\r\n                                            </p>\r\n                                        </div>\r\n                                    </div>\r\n                                    <Link to={`/dashboard/blog/edit/${post.userFriendlySlug}/${post.id}`} className=\"text-sky-600 hover:underline text-sm font-semibold\">\r\n                                        Edit\r\n                                    </Link>\r\n                                </div>\r\n                            ))\r\n                        ) : (\r\n                            !error && <p className=\"text-center text-gray-500 py-4\">No recent posts to display.</p>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DashboardPage;"],"names":["q","x","t","e","r","length","n","indexOf","f","Math","pow","h","max","min","trunc","M","F","abs","d","Error","constructor","super","this","name","message","C","floor","concat","z","L","l","j","U","m","b","i","u","Array","o","a","substring","c","s","Uint8ClampedArray","y","B","R","w","P","G","cos","PI","T","V","I","E","BlurHashCanvas","_ref","hash","width","height","punch","canvasRef","useRef","useEffect","current","pixels","decode","ctx","getContext","imageData","createImageData","data","set","putImageData","error","console","_jsx","ref","className","_ref2","baseName","alt","sizes","onLoad","eager","blurHash","isLoaded","setIsLoaded","useState","handleImageLoad","style","aspectRatio","match","warn","cleanedBaseName","imageProps","src","API_URL","srcSet","join","_objectSpread","fetchPriority","_jsxs","children","LazyLoadImage","effect","afterLoad","getReturnValues","countDown","hours","minutes","seconds","isFinished","LogItem","log","isSuccess","status","borderColor","color","FaCheckCircle","FaExclamationCircle","dateString","lastFetchTime","Date","toLocaleString","triggerSource","details","title","logs","onRefresh","onFlush","nextRefreshTime","isRefreshing","setIsRefreshing","isFlushing","setIsFlushing","showAllLogs","setShowAllLogs","targetTime","countDownDate","useMemo","getTime","setCountDown","interval","setInterval","clearInterval","useCountdown","handleFlush","async","password","flushFn","formatTime","toString","padStart","countdownText","logsToShow","slice","onClick","disabled","FaSync","FaTrash","map","id","FaChevronUp","FaChevronDown","isOpen","onClose","onConfirm","isLoading","setPassword","type","value","onChange","target","placeholder","autoFocus","handleClose","handleConfirm","getNextScheduledTime","hour","minute","timeZone","now","nextRefresh","setUTCHours","setUTCDate","getUTCDate","ApiStatusPanel","setLogs","setIsLoading","modalState","setModalState","isActionLoading","setIsActionLoading","fetchLogs","useCallback","response","getApiStatusHistory","blockConfigs","logFilters","refreshIndices","flushHandler","flushIndices","refreshMovers","flushMovers","config","ApiStatusBlock","filters","filter","some","apiName","includes","handler","handleFlushRequest","PasswordPromptModal","_error$response","_error$response$data","alert","StatCard","icon","DashboardPage","user","useAuth","posts","setPosts","setError","linkedInAuthUrl","process","REACT_APP_API_BASE_URL","fetchPostsForStats","getPosts","err","intervalId","recentPosts","p","sort","updatedAt","createdAt","totalPublishedPosts","totalScheduledPosts","FaFileAlt","FaEye","Link","to","FaPlusSquare","FaLinkedin","linkedinConnected","href","post","ResponsiveAuthImage","thumbnails","imageUrl","toLocaleDateString","userFriendlySlug"],"sourceRoot":""}